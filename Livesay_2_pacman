package livesay_2_pacman;

import java.util.ArrayList;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.paint.Color;
import javafx.scene.shape.Arc;
import javafx.scene.shape.ArcType;
import javafx.stage.Stage;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;

public class Livesay_2_pacman extends Application {

    static GraphicsContext gc;
    static Group root;
    static Pacman pacman;
    static Canvas canvas;
    static ArrayList<String> input = new ArrayList<String>();
    static ArrayList<Wall> wallz = new ArrayList<Wall>();
    static boolean key_right;
    static boolean key_left;
    static boolean key_down;
    static boolean key_up;
    static Wall wall;

    @Override
    public void start(Stage primaryStage) {

        root = new Group();
        Scene scene = new Scene(root);

        primaryStage.setScene(scene);

        canvas = new Canvas(1280, 768);

        gc = canvas.getGraphicsContext2D();

        AnimationTimer timer = new MyTimer();

        pacman = new Pacman(100, 100);
        wall = new Wall(100, 100, 100, 100);

        scene.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                
                
                key_right = (event.getCode() == KeyCode.RIGHT);
                key_up = (event.getCode() == KeyCode.UP);
                key_down = (event.getCode() == KeyCode.DOWN);
                key_left = (event.getCode() == KeyCode.LEFT);

            }
        });

        Group g = new Group();

        root.getChildren().add(canvas);
        root.getChildren().add(pacman);

        primaryStage.show();
        timer.start();
    }

    public static void main(String[] args) {
        Application.launch(args);

    }

    private class MyTimer extends AnimationTimer {

        @Override
        public void handle(long now) {
            /* if (input.contains("LEFT")) {
                pacman.setX(pacman.getX() - 4);

            }
             */
            doHandle();
        }

        private void doHandle() {
            if (key_down) {
                pacman.goDown();

            }
            if (key_right) {
                pacman.goRight();
            }
            if (key_up) {
                pacman.goUp();
            }
            if (key_left) {
                pacman.goLeft();
            }

        }

    }

    class Pacman extends Arc {

        public Pacman(int x, int y) {
            this.setCenterX(400.0f);
            this.setCenterY(400.0f);
            this.setRadiusX(25.0f);
            this.setRadiusY(25.0f);
            this.setStartAngle(45.0f);
            this.setLength(270.0f);
            this.setType(ArcType.ROUND);
            this.setFill(Color.GOLD);

        }

        void setX(int x) {
            this.setCenterX(x);
        }

        void setY(int y) {
            this.setCenterY(y);
        }

        public int getY() {
            return (int) this.getCenterY();
        }

        public int getX() {
            return (int) this.getCenterX();
        }

        public void goRight() {
            this.setStartAngle(45.0f);
            if (this.getCenterX() > canvas.getWidth()) {
                this.setX(0);
            }
            int amount = 5;
            if (checkBounds(this)) {
                amount = -5;
                this.setX(this.getX() - 100);
            }
            this.setX(this.getX() + amount);
        }

        public void goLeft() {
            this.setStartAngle(225.0f);
            if (this.getCenterX() < 0) {
                this.setX((int) canvas.getWidth());

            }
            int amount = -5;
            if (checkBounds(this)) {
                amount = 5;
                this.setX(this.getX() + 300);
            }
            this.setX(this.getX() + amount);

        }

        public void goUp() {
            this.setStartAngle(135.0f);
            if (this.getCenterY() < 0) {
                this.setY((int) canvas.getHeight());

            }
            int amount = -5;
            if (checkBounds(this)) {
                amount = 5;
                this.setY(this.getY() + 100);
            }
            this.setY(this.getY() + amount);

        }

        public void goDown() {
            pacman.setStartAngle(315.0f);
            if (this.getCenterY() > canvas.getHeight()) {
                this.setY(0);

            }
            int amount = 5;
            if (checkBounds(this)) {
                amount = -5;
                this.setY(this.getY() - 100);
            }
            this.setY(this.getY() + amount);

        }

    }

    class Wall extends Rectangle {

        public Wall(int x, int y, int w, int h) {
            this.setFill(Color.GOLD);
            this.setX(x);
            this.setY(y);
            this.setWidth(w);
            this.setHeight(h);
            this.setHeight(200);
            this.setWidth(220);
            root.getChildren().add(this);
            wallz.add(this);
        }
    }

    public boolean checkBounds(Shape s) {

        for (Wall w : wallz) {
            if (s.getBoundsInParent().intersects(w.getBoundsInParent())) {
                return true;
            }
        }
        return false;

    }

}
